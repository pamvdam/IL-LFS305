---
#- hosts: dockerset2
- hosts: dockern41
  vars: 
   - docker_image_pv: "/dev/vdb"
   - docker_image_vg : "vg_docker_img01"
   - docker_image_data_lv: "docker_image"
   - docker_image_meta_lv: "{{ docker_image_data_lv }}_meta"
   - docker_image_data_lv_size: "95%VG"
   - docker_image_meta_lv_size: "1%VG"
   - docker_image_lv_options: "--wipesignatures y"
   - docker_vol_pv: "/dev/vdc"

   - docker_vol_vg: "vg_docker_vol01"
   - docker_vol_lv: "lv_docker_vol01"
   - docker_vol_size: "100%VG"
   - docker_vol_mount: "/var/lib/docker"

   - grub2cfg: "/boot/efi/EFI/centos/grub.cfg"

   - docker_repo_url: "https://download.docker.com/linux/centos/7/$basearch/stable"
   - docker_repo_key: "https://download.docker.com/linux/centos/gpg"



  tasks:
   - name: 0a. Disable and stop docker
     become: yes
     systemd: service=docker state=stopped enabled=no
     ignore_errors: true

   - name: 0b. Remove VG1
     become: yes
     lvg: vg={{ docker_image_vg }} force=yes state=absent

   - name: 0c. Zero out pv1
     become: yes
     shell: dd if=/dev/zero of={{ docker_image_pv }} bs=1024k count=100

   - name: 0c. Zero out pv2
     become: yes
     shell: dd if=/dev/zero of={{ docker_vol_pv }} bs=1024k count=100

   - name: 1a. Create volumegroup for docker images
     become: yes
     lvg: vg={{ docker_image_vg }} pvs={{ docker_image_pv }} state=present 

   - name: 1b. Create volumegroup for docker volumes
     become: yes
     lvg: vg={{ docker_vol_vg }} pvs={{ docker_vol_pv }} state=present 

   - name: 1c. Create LV for docker volumes
     become: yes
     lvol: vg={{ docker_vol_vg }} lv={{ docker_vol_lv }} size={{ docker_vol_size }}
    
   - name: 1d. Create FS for docker volumes
     become: yes
     filesystem: fstype=xfs dev=/dev/{{ docker_vol_vg }}/{{ docker_vol_lv }} 

   - name: 1e. Create FSTAB entry for docker volumes on {{ docker_vol_mount }}
     become: yes
     mount: path={{ docker_vol_mount }} src=/dev/{{ docker_vol_vg }}/{{ docker_vol_lv }} fstype=xfs state=present

   - name: 1f. Mount FS for docker volumes on {{ docker_vol_mount }}
     become: yes
     mount: path={{ docker_vol_mount }} src=/dev/{{ docker_vol_vg }}/{{ docker_vol_lv }} fstype=xfs state=mounted

   - name: 1g. Create data LV for docker image VG
     become: yes
     lvol: vg={{ docker_image_vg }} lv={{ docker_image_data_lv }} size={{ docker_image_data_lv_size }} opts={{ docker_image_lv_options }} active=no

   - name: 1h. Create data LV for docker image VG
     become: yes
     lvol: vg={{ docker_image_vg }} lv={{ docker_image_meta_lv }} size={{ docker_image_meta_lv_size }} opts={{ docker_image_lv_options }} active=no

   - name: 1i. Convert LVOLs 
     become: yes
     shell: /sbin/lvconvert -y --zero n -c 512K --thinpool "{{ docker_image_vg }}/{{ docker_image_data_lv }}" --poolmetadata "{{ docker_image_vg}}/{{ docker_image_meta_lv }}"

   - name: 1j. Configure LV profile for {{ docker_image_vg }}-{{ docker_image_data_lv }}
     become: yes
     template: src=thinlv.profile.j2 dest=/etc/lvm/profile/{{ docker_image_vg }}-{{ docker_image_data_lv }}.profile owner=root group=root mode=0644
 
   - name: 1k. Activate LV profile on {{ docker_image_vg }}-{{ docker_image_data_lv }}
     become: yes
     shell: /usr/sbin/lvchange --metadataprofile {{ docker_image_vg }}-{{ docker_image_data_lv }} {{ docker_image_vg }}/{{ docker_image_data_lv }}

   - name: 2. Uninstall old docker rpms
     become: yes
     yum: name={{ item }} state=absent
     with_items: 
     - docker
     - docker-selinux
     - docker-common
     - docker-engine
     - docker-ce

   - name: 3. Install pre-requisite packages
     become: yes
     yum: name={{ item }} state=latest
     with_items: 
     - yum-utils
     - device-mapper-persistent-data
     - lvm2

   - name: 4. Add and enable Docker repo
     become: yes
     yum_repository:
       name: Docker-CE-Stable
       description: Offical Docker CE Repo
       file: docker-ce
       baseurl: "{{ docker_repo_url }}"
       gpgcheck: yes
       enabled: yes
       state: present
       gpgkey: "{{ docker_repo_key }}"

   - name: 5. Install docker rpms
     become: yes
     yum: name={{ item }} state=latest
     with_items: 
     - docker-ce

   - name: 6. Create /etc/docker directory
     become: yes
     file: path=/etc/docker state=directory mode=755 owner=root group=root

   - name: 7. Configure docker daemon.json profile in /etc/docker/daemon.json.
     become: yes
     template: src=daemon.json.j2 dest=/etc/docker/daemon.json owner=root group=root mode=0644

   - name: 8. Enable users to use docker
     become: yes
     user: name={{ item }} append=yes groups=docker
     with_items: 
     - pascal
     - kjell
     - jarmo

   - name: 9. Enable docker
     become: yes
     systemd: service=docker enabled=yes

   - name: 10. Change kernel configuration for swapaccounting
     become: yes
     lineinfile: 
       dest: /etc/default/grub
       state: present
       backrefs: yes
       regexp: '^(GRUB_CMDLINE_LINUX=(?!.*swapaccounting)\"[^\"]+)(\".*)'
       line: '\1 swapaccounting=1\2'

   - name: 11. Change kernel configuration for cgroup_enable=memory
     become: yes
     lineinfile: 
       dest: /etc/default/grub
       state: present
       backrefs: yes
       regexp: '^(GRUB_CMDLINE_LINUX=(?!.*cgroup_enable=memory)\"[^\"]+)(\".*)'
       line: '\1 cgroup_enable=memory\2'

   - name: 12. Apply new default parameters to grub2 config
     become: yes
     shell: /usr/sbin/grub2-mkconfig -o {{ grub2cfg }} 

   - name: 13a. Check for reboot hint.
#     shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
     shell: grep -E 'cgroup_enable=memory.*swapaccounting=1|swapaccounting=1.*cgroup_enable=memory' /proc/cmdline ; RC=$? ; if [ ${RC} -eq 0 ] ; then echo 'no' ; else echo 'reboot'; fi
     ignore_errors: true
     register: reboot_hint

   - name: 13b. Rebooting ...
     become: yes
     ignore_errors: true
     command: sleep 5 ; /usr/sbin/shutdown -r now "Reboot required for updated kernel parameters."
     async: 1
     poll: 0
     when: reboot_hint.stdout.find("reboot") != -1
     register: rebooting

   - name: 14. Wait for servers to become available again...
     when: rebooting|changed
     local_action: 
        wait_for host={{ ansible_ssh_host | default(inventory_hostname) }} 
        state=started port=22 delay=30 
        timeout=300 connect_timeout=15
